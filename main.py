import streamlit as st
import pandas as pd
import numpy as np
from Functions import custom_print

st.set_page_config(
    page_title="Index rerum",
    page_icon="üìö",
    layout="wide",
    initial_sidebar_state="expanded",
    menu_items={
        "Report a bug": "mailto:avyudina_2@edu.hse.ru",
        "About": """
        –ê–≤—Ç–æ—Ä: –ê–Ω–≥–µ–ª–∏–Ω–∞ –Æ–¥–∏–Ω–∞ ([GitHub](https://github.com/AngelinaYudina), [c–∞–π—Ç](https://www.hse.ru/staff/ayudina))  
        –°—Ç–∞–∂–µ—Ä-–∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å [–ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–≥–æ —Ü–µ–Ω—Ç—Ä–∞ –∞–Ω–∞–ª–∏–∑–∞ –∏ –≤—ã–±–æ—Ä–∞ —Ä–µ—à–µ–Ω–∏–π –ù–ò–£ –í–®–≠](https://www.hse.ru/DeCAn/)
        """
    }
)
st.title("–û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–Ω—è—Ç–∏—è —Ñ–∏–ª–æ—Å–æ—Ñ–∏–∏ —Ç–µ—Ö–Ω–∏–∫–∏ –æ—Ç –≠. –ö–∞–ø–ø–∞ –¥–æ STS. Index rerum")

# global constants
messages = ["–ü–æ–Ω—è—Ç–∏–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º:", "–ü–æ–Ω—è—Ç–∏–µ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º:", "–ü–æ–Ω—è—Ç–∏–µ –Ω–∞ –Ω–µ–º–µ—Ü–∫–æ–º:", "–ü–æ–Ω—è—Ç–∏–µ –Ω–∞ —Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–æ–º:",
            "–¢–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–µ –≥–Ω–µ–∑–¥–æ:", "–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è:", "–¶–∏—Ç–∞—Ç—ã:", "–ö–ª—é—á–µ–≤—ã–µ –∞–≤—Ç–æ—Ä—ã:", "–ò—Å—Ç–æ—á–Ω–∏–∫–∏:",
            "–ò–Ω—Å—Ç–∏—Ç—É—Ç—ã –∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –≥—Ä—É–ø–ø—ã:", "–ü—Ä–µ–¥–º–µ—Ç–Ω—ã–µ –æ–±–ª–∞—Å—Ç–∏:"]
new_row_flags = [False, False, False, False, False, True, True, False, True, True, False]
link_flag = [False, False, False, False, True, False, False, False, False, False, False]

# data preparation
df = pd.read_excel("Demo Data.xlsx")
df.fillna("-", inplace=True)
to_lower_list = ["–ü–æ–Ω—è—Ç–∏–µ_rus", "–ü–æ–Ω—è—Ç–∏–µ_eng", "–ü–æ–Ω—è—Ç–∏–µ_ger", "–ü–æ–Ω—è—Ç–∏–µ_fr", "–¢–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–µ –≥–Ω–µ–∑–¥–æ"]
for col in to_lower_list:
    df[col] = df[col].str.lower()
rel_terms = dict()
for i in range(len(df.values)):
    df_split = df.values[i][4].split(";\n")
    for el in df_split:
        if el not in rel_terms:
            rel_terms[el] = [df["–ü–æ–Ω—è—Ç–∏–µ_rus"].iloc[i]]
        else:
            rel_terms[el].append(df["–ü–æ–Ω—è—Ç–∏–µ_rus"].iloc[i])

# tabs
tab1_search, tab2_list = st.tabs(["–ü–æ–∏—Å–∫", "–°–ø–∏—Å–æ–∫ –ø–æ–Ω—è—Ç–∏–π"])

# search
with tab1_search:
    user_input = st.text_input("–í–≤–µ–¥–∏—Ç–µ –ø–æ–Ω—è—Ç–∏–µ", value="", key="search").lower().strip()
    s1 = df["–ü–æ–Ω—è—Ç–∏–µ_rus"].str.contains(user_input)
    s2 = df["–ü–æ–Ω—è—Ç–∏–µ_eng"].str.contains(user_input)
    s3 = df["–ü–æ–Ω—è—Ç–∏–µ_ger"].str.contains(user_input)
    s4 = df["–ü–æ–Ω—è—Ç–∏–µ_fr"].str.contains(user_input)
    df_search_res = df[s1 | s2 | s3 | s4]
    if user_input:
        if df_search_res.shape[0] == 0 or user_input == "-":
            st.write("–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        elif df_search_res.values.shape[0] == 1:
            st.markdown("---")
            data_list = [*df_search_res["–ü–æ–Ω—è—Ç–∏–µ_rus"].values, *df_search_res["–ü–æ–Ω—è—Ç–∏–µ_eng"].values,
                         *df_search_res["–ü–æ–Ω—è—Ç–∏–µ_ger"].values, *df_search_res["–ü–æ–Ω—è—Ç–∏–µ_fr"].values,
                         *df_search_res["–¢–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–µ –≥–Ω–µ–∑–¥–æ"].values, *df_search_res["–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è"].values,
                         *df_search_res["–¶–∏—Ç–∞—Ç—ã"].values, *df_search_res["–ö–ª—é—á–µ–≤—ã–µ –∞–≤—Ç–æ—Ä—ã"].values,
                         *df_search_res["–ò—Å—Ç–æ—á–Ω–∏–∫–∏"].values, *df_search_res["–ò–Ω—Å—Ç–∏—Ç—É—Ç—ã –∏ –∏—Å—Å–ª–µ–¥. –≥—Ä—É–ø–ø—ã"].values,
                         *df_search_res["–ü—Ä–µ–¥–º–µ—Ç–Ω—ã–µ –æ–±–ª–∞—Å—Ç–∏"].values]
            for i in range(len(data_list)):
                custom_print(*df_search_res["–ü–æ–Ω—è—Ç–∏–µ_rus"].values, messages[i], data_list[i], rel_terms,
                             new_row_flags[i], link_flag[i], data_rel=[messages, df, new_row_flags, link_flag])
            st.markdown("---")
        else:
            if s1.sum():
                words = list(df_search_res["–ü–æ–Ω—è—Ç–∏–µ_rus"])
            else:
                l_name = ["–ü–æ–Ω—è—Ç–∏–µ_eng", "–ü–æ–Ω—è—Ç–∏–µ_ger", "–ü–æ–Ω—è—Ç–∏–µ_fr"][np.array([s2.sum(), s3.sum(), s4.sum()]).argmax()]
                words = list(df_search_res[l_name])
            word_selected = st.selectbox("–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–Ω—è—Ç–∏–π", index=None,
                                         placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –ø–æ–Ω—è—Ç–∏–µ...", options=words)
            st.markdown("---")
            for row in df_search_res.values:
                if word_selected in [row[0], row[1], row[2], row[3]]:
                    data_list = [row[0], row[1], row[2], row[3], row[4], row[9], row[10], row[5], row[6], row[7],
                                 row[8]]
                    for i in range(len(data_list)):
                        custom_print(row[0], messages[i], data_list[i], rel_terms, new_row_flags[i], link_flag[i],
                                     data_rel=[messages, df, new_row_flags, link_flag])
                    st.markdown("---")
                    break

# list
with tab2_list:
    language_selected = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫", options=["Rus", "Eng", "Ger", "Fr"])
    index = ["Rus", "Eng", "Ger", "Fr"].index(language_selected)
    for row in df.values:
        with st.expander(f"**{str(row[index]).capitalize()}**"):
            st.markdown("---")
            data_list = [row[0], row[1], row[2], row[3], row[4], row[9], row[10], row[5], row[6], row[7],
                         row[8]]
            for i in range(len(data_list)):
                custom_print(row[0], messages[i], data_list[i], rel_terms, new_row_flags[i], link_flag[i],
                             is_search=False)
